---
description: Global rules for the Birdsongs‑Seq‑Autoencoder research package
alwaysApply: true
globs:
  - src/birdsong/**/*.py
  - tests/**/*.py
---

# Project Awareness & Context
- Always skim `docs/motivation.md` and `docs/architecture.md` at the start of a new feature or bug‑fix to stay aware of model goals and design choices
- Check `task_board.md` before coding. If the task is new, add a bullet with a short description and today's date (YYYY‑MM‑DD)
- Respect the folder contract laid out in `docs/architecture.md` (data → models → training → evaluation)

# Code Structure & Modularity
- Hard cap: 500 lines per file. If a module grows > 450 LoC, split it into helpers
- Runtime code lives under `src/birdsong/` and is grouped by concern:
  - `data/` → simulations, HDF5 aggregation, loaders  
  - `models/` → LFADS network + loss functions  
  - `training/` → training loop / schedulers  
  - `evaluation/` → metrics & plotting
- Use relative imports (`from ..models import lfads`) within the package

# Testing & Reliability
- Pytest required for every public function/class. Tests mirror the `src/` hierarchy inside `tests/`
- Each added feature gets:
  1. a happy path test
  2. an edge‑case test
  3. a failure or type‑error test
- Target ≥ 90% coverage (enforced later with `pytest‑cov`)

# Task Tracking
- Close tasks by moving them to a Done section in `task_board.md`
- If work reveals follow‑up items, log them under "Discovered During Work"

# Style & Conventions
- Language: Python 3.10+
- PEP‑8 formatted by `black` (line length = 88) and linted by `ruff`
- Type‑hints mandatory on all public APIs
- Docstrings follow Google style:
  ```python
  def foo(bar: torch.Tensor) -> torch.Tensor:
      """
      One‑sentence summary.

      Args:
          bar (Tensor): shape (b, t, f)

      Returns:
          Tensor: same shape as `bar`, normalised over the feature dimension.
      """
- No external web calls inside runtime code; experiments must be reproducible offline

# Documentation & Explainability
- Update `README.md` or the Markdown docs whenever APIs change
- Complex mathematical sections should reference equations from your CCN PDF
- Inline comments should explain why an algorithmic choice is made, not restate what the code does

# AI‑assistant Behaviour Rules
- Ask if unclear rather than guessing missing context
- Never hallucinate third‑party libraries; stick to dependencies declared in pyproject.toml
- Confirm file paths exist before referencing them
- Do not overwrite existing code unless explicitly commanded or covered by a task in `task_board.md`